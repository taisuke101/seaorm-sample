//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0//!
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use super::post::Entity as Post;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "family")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    pub age: i32,
}

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct UpdateModal {
    pub name: Option<String>,
    pub age: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Post,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Post => Entity::has_many(Post).into(),
        }
    }
}

impl Related<Post> for Entity {
    fn to() -> RelationDef {
        Relation::Post.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
