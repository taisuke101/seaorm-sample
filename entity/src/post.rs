//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0//!
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use super::family::{Column as FamilyColumn, Entity as Family};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "post")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub title: String,
    pub text: String,
    pub family_id: i32,
}

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct UpdateModal {
    pub title: Option<String>,
    pub text: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Family,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Family => Entity::belongs_to(Family)
                .from(Column::FamilyId)
                .to(FamilyColumn::Id)
                .into(),
        }
    }
}

impl Related<Family> for Entity {
    fn to() -> RelationDef {
        Relation::Family.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
